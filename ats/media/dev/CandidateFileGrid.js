/*
 * File: CandidateFileGrid.js
 * Date: Sat Nov 20 2010 10:24:54 GMT-0500 (EST)
 * 
 * This file was generated by Ext Designer version xds-1.0.2.14.
 * http://www.extjs.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

CandidateFileGrid = Ext.extend(CandidateFileGridUi, {
    initComponent: function() {
        CandidateFileGrid.superclass.initComponent.call(this);
        this.newbutton.on('click', this.onNewClick, this );
        this.deletebutton.on('click', this.onDeleteClick, this );
        this.resumebutton.on('click', this.onResumeClick, this );
     }
    ,onNewClick: function ( button, event ){
        var candidate__id = this.store.baseParams["candidate__id"];
        if ( !Ext.isEmpty( candidate__id ) ){
            var win = new CandidateFileNewWindow();
            //personalize title for candidate
            win.setTitle( win.title + " for Candidate " + candidate__id ); 
            //set to upload file and assign to this candidate
            var field = win.form.getForm().findField( 'candidate' );
            field.setValue( candidate__id );
            win.show();
        } else {
            Ext.Msg.alert('Warning','Candidate must be selected');
        }
     }
    ,onDeleteClick: function ( button, event ){
        var grid = this;
        Ext.MessageBox.confirm('Confirm'
                               ,'Delete selected file?'
                               ,function( btn )
        {
        if ( btn == 'no' ){ return; }
        var selected =  grid.getSelectionModel().getSelected();
        if ( selected != 'undefined' ){
            Ext.Ajax.request({ 
                url: '/ats/main/candidatefile/del/',
                waitMsg: 'Please wait...',
                params: {
                    id   :  selected.get('id')
                }
                ,success: function( response ){
                    jsonresp = Ext.util.JSON.decode( response.responseText );
                    if ( jsonresp.success ){
                        grid.store.reload();
                    } else {
                        Ext.MessageBox.alert(
                            'Error',
                            jsonresp.error + '<br>' );
                    }
                }
                ,failure: function( response ){
                    Ext.MessageBox.alert(
                        'Error',
                        'Can not connect to the server.<br>');
                }
            });
        }
        });//confirm 
     }
    ,onResumeClick: function ( button, event ){
        var grid = this;
        Ext.MessageBox.confirm('Confirm'
                               ,'Update candidate resume from selected file?'
                               ,function( btn )
        {
        if ( btn == 'no' ){ return; }

        var selected =  grid.getSelectionModel().getSelected();
        var candidate__id = grid.store.baseParams["candidate__id"];
        //if ( selected != 'undefined' && typeof candidate__id != 'undefined' ){
        if ( selected != 'undefined' ){
            Ext.Ajax.request({ 
                url: '/ats/main/candidatefile/resume/',
                waitMsg: 'Please wait...',
                params: {
                     id : selected.get('id')
                    ,candidate__id : candidate__id
                }
                ,success: function( response ){
                    jsonresp = Ext.util.JSON.decode( response.responseText );
                    if ( jsonresp.success ){
                        grid.store.reload();
                    } else {
                        Ext.MessageBox.alert(
                            'Error',
                            jsonresp.error + '<br>' );
                    }
                }
                ,failure: function( response ){
                    Ext.MessageBox.alert(
                        'Error',
                        'Can not connect to the server.<br>');
                }
            });
        }
        });//confirm 
   }
});
Ext.reg('candidatefilegrid', CandidateFileGrid);
