/*
 * File: MACFilterPanel.js
 * Date: Tue May 31 2011 08:27:16 GMT-0400 (EDT)
 * 
 * This file was generated by Ext Designer version xds-1.0.2.14.
 * http://www.extjs.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

MACFilterPanel = Ext.extend(MACFilterPanelUi, {
    initComponent: function() {
        MACFilterPanel.superclass.initComponent.call(this);

        this.cbactivities = new Ext.ux.form.SuperBoxSelect({
            allowBlank:true,
            allowAddNewData: false,
            xtype:'superboxselect',
            fieldLabel: 'Activities',
            resizable: true,
            name: 'activities',
            anchor:'90%',
            store: { xtype: 'activitiesstore' },
            mode: 'local',
            displayField: 'title',
            displayFieldTpl: '{title}',
            valueField: 'id',
            forceSelection : false,
            stackItems: true,
            //value: '',
            //styleField: 'style',
            //extraItemStyle: 'border-width:2px',
            //minChars: 2
            //extraItemCls: 'x-flag',
            //extraItemCls: 'x-tag',
            //queryDelay: 0,
            //triggerAction: 'all',
            //minChars: 1,
            //listeners: {
            //    beforeadditem: function(bs,v, f){
            //        //console.log('beforeadditem:', v);
            //        //return false;
            //    },
            //    additem: function(bs,v){
            //        //console.log('additem:', v);
            //    },
            //    beforeremoveitem: function(bs,v){
            //        //console.log('beforeremoveitem:', v);
            //        //return false;
            //    },
            //    removeitem: function(bs,v){
            //        //console.log('removeitem:', v);
            //    },
            //    newitem: function(bs,v,f){
            //        v = v +'';
            //        v = v.slice(0,1).toUpperCase() + v.slice(1).toLowerCase();
            //        var newObj = {
            //            tag: v,
            //            name: v
            //        };
            //        bs.addNewItem(newObj);
            //    }
            //}
         });

        this.cbstatues = new Ext.ux.form.SuperBoxSelect({
            allowBlank:true,
            xtype:'superboxselect',
            fieldLabel: 'Statues',
            resizable: true,
            name: 'statues',
            anchor:'90%',
            store: { xtype: 'macstatusstore' },
            mode: 'local',
            displayField: 'title',
            displayFieldTpl: '{title}',
            valueField: 'id',
            //value: '',
            stackItems: true,
            forceSelection : false
        });


        this.cbmandates = new Ext.ux.form.SuperBoxSelect({
            allowBlank:true,
            xtype:'superboxselect',
            fieldLabel: 'Mandates',
            resizable: true,
            name: 'mandates',
            anchor:'90%',
            store: { xtype: 'mandatecomboboxstore' },
            mode: 'remote',
            displayField: 'title',
            displayFieldTpl: '{title}',
            valueField: 'id',
            //value: '',
            stackItems: true,
            forceSelection : false
        });

        this.cbcandidates = new Ext.ux.form.SuperBoxSelect({
            allowBlank:true,
            xtype:'superboxselect',
            fieldLabel: 'Candidates',
            resizable: true,
            name: 'candidates',
            anchor:'90%',
            store: { xtype: 'candidatecomboboxstore' },
            mode: 'remote',
            displayField: 'ID:{id} {first_name} {last_name}',
            displayFieldTpl: 'ID:{id} {first_name} {last_name}',
            valueField: 'id',
            //value: '',
            stackItems: true,
            forceSelection : false
        });


    
        this.applybutton.on('click', this.onApplyClick, this );
        this.resetbutton.on('click', this.onResetClick, this );
     }
     ,onRender: function(ct, position) {
         MACFilterPanel.superclass.onRender.call(this, ct, position);
         this.add( this.cbactivities );
         this.add( this.cbstatues );
         this.add( this.cbcandidates );
         this.add( this.cbmandates );
     }
     ,onApplyClick: function( button, event ) {
         var form = this.getForm();
         if( form.isValid() ){
            var store = Ext.getCmp('mactab').store;
            var activities = this.cbactivities.getValue();
            if ( !Ext.isEmpty( activities ) ){
                store.setBaseParam('activities',activities);
            } else {
                delete store.baseParams["activities"];
            }
            var statues = this.cbstatues.getValue();
            if ( !Ext.isEmpty( statues ) ){
                store.setBaseParam('statues',statues);
            } else {
                delete store.baseParams["statues"];
            }
            var mandates = this.cbmandates.getValue();
            if ( !Ext.isEmpty( mandates ) ){
                store.setBaseParam('mandates',mandates);
            } else {
                delete store.baseParams["mandates"];
            }
            var candidates = this.cbcandidates.getValue();
            if ( !Ext.isEmpty( candidates ) ){
                store.setBaseParam('candidates',candidates);
            } else {
                delete store.baseParams["candidates"];
            }
            var description = this.description.getValue();
            if ( !Ext.isEmpty( description ) ){
                store.setBaseParam('description',description);
            } else {
                delete store.baseParams["description"];
            }
            store.reload( store.lastOptions );
         }
     }
     ,onResetClick: function( button, event ) {
         var store = Ext.getCmp('mactab').store;
         var form = this.getForm();
         delete store.baseParams["candidates"];
         delete store.baseParams["mandates"];
         delete store.baseParams["activities"];
         delete store.baseParams["statues"];
         delete store.baseParams["description"];
         form.reset();
         store.reload( store.lastOptions );
     }
     ,onSuccess: function( form, action ) {
         //Ext.StoreMgr.lookup('CandidateStore').reload();
         Ext.example.msg('Success','Candidated upated correctly".');
         //Ext.Msg.show({
         //    title: 'Success'
         //    ,msg: 'Candidate updated succesfully!'
         //    ,modal: true
         //    ,icon: Ext.Msg.INFO
         //    ,buttons: Ext.Msg.OK
         //});
     }
     ,onFailure: function( form, action ) {
         switch ( action.failureType ) {
             case Ext.form.Action.CLIENT_INVALID:
                 this.onClientInvalid( form, action);
             break;
             case Ext.form.Action.CONNECT_FAILURE:
                 this.onConnectionFailure(form, action);
             break;
             case Ext.form.Action.SERVER_INVALID:
                 this.onServerInvalid(form, action);
             break;
         };
     }
     ,onClientInvalid: function( form, action ) {
         Ext.Msg.alert('Failure',
                       'Fields may not be submitted with invalid values');
     } 
     ,onConnectionFailure: function( form, action ) {
         Ext.Msg.alert('Failure', 
                       'Ajax communication failed');
     }
     ,onServerInvalid: function( form, action ) {
         Ext.Msg.alert('Failure', action.result.msg);
     }

});
Ext.reg('macfilterpanel', MACFilterPanel);
